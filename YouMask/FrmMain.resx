<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        YII=
</value>
  </data>
</root>